// weekly-quota.controller.js

const weeklyQuotaService = require('../services/weekly-quota.service');
const { upload } = require('../utils/upload.util');

class WeeklyQuotaController {
    /**
     * Create new quota request
     * @route POST /api/quotas
     */
    async createQuotaRequest(req, res) {
        try {
            // Validate input data
            const validationErrors = await this.validateQuotaData(req.body);
            if (validationErrors.length > 0) {
                return res.status(400).json({
                    status: 'error',
                    message: 'Validation failed',
                    errors: validationErrors
                });
            }

            const quota = await weeklyQuotaService.createQuotaRequest(
                {
                    permitId: req.body.permitId,
                    plannedUsageDate: req.body.plannedUsageDate,
                    purpose: req.body.purpose,
                    blastingLocation: req.body.blastingLocation,
                    blastingTime: req.body.blastingTime,
                    safetyMeasures: req.body.safetyMeasures,
                    validityPeriod: req.body.validityPeriod,
                    items: req.body.items // Array of explosive types and quantities
                },
                req.userId
            );

            res.status(201).json({
                status: 'success',
                message: 'Quota request created successfully',
                data: quota
            });
        } catch (error) {
            console.log(error);
            res.status(error.status || 500).json({
                status: 'error',
                message: error.message || 'Error creating quota request'
            });
        }
    }

    /**
     * Update quota status (Approve/Reject)
     * @route PATCH /api/quotas/:quotaId/status
     */
    async updateQuotaStatus(req, res) {
        try {
            const { status, reason, items } = req.body;

            // Validate status transition
            const validationError = await this.validateStatusTransition(
                req.params.quotaId,
                status,
                req.userRole
            );
            
            if (validationError) {
                return res.status(400).json({
                    status: 'error',
                    message: validationError
                });
            }

            // Handle quota seal photo upload if provided
            let quotaSealPhotoURL = null;
            if (req.files && req.files.quotaSeal) {
                quotaSealPhotoURL = await upload(
                    req.files.quotaSeal,
                    'quota-seals',
                    req.params.quotaId
                );
            }

            const quota = await weeklyQuotaService.updateQuotaStatus(
                req.params.quotaId,
                status,
                {
                    reason,
                    items,
                    quotaSealPhotoURL
                },
                req.userId
            );

            res.json({
                status: 'success',
                message: `Quota ${status.toLowerCase()} successfully`,
                data: quota
            });
        } catch (error) {
            res.status(error.status || 500).json({
                status: 'error',
                message: error.message || 'Error updating quota status'
            });
        }
    }

    /**
     * Record quota usage
     * @route POST /api/quotas/:quotaId/usage
     */
    async recordQuotaUsage(req, res) {
        try {
            const usage = await weeklyQuotaService.recordQuotaUsage(
                req.params.quotaId,
                {
                    blastingReport: req.body.blastingReport,
                    safetyChecklist: req.body.safetyChecklist,
                    weatherConditions: req.body.weatherConditions,
                    supervisorName: req.body.supervisorName,
                    status: req.body.status,
                    items: req.body.items
                },
                req.userId
            );

            res.json({
                status: 'success',
                message: 'Usage recorded successfully',
                data: usage
            });
        } catch (error) {
            res.status(error.status || 500).json({
                status: 'error',
                message: error.message || 'Error recording usage'
            });
        }
    }

    /**
     * Get quota details
     * @route GET /api/quotas/:quotaId
     */
    async getQuotaDetails(req, res) {
        try {
            const quota = await weeklyQuotaService.getQuotaDetails(req.params.quotaId);
            
            if (!quota) {
                return res.status(404).json({
                    status: 'error',
                    message: 'Quota not found'
                });
            }

            res.json({
                status: 'success',
                data: quota
            });
        } catch (error) {
            res.status(error.status || 500).json({
                status: 'error',
                message: error.message || 'Error retrieving quota details'
            });
        }
    }

    /**
     * Get permit quotas
     * @route GET /api/quotas/permit/:permitId
     */
    async getPermitQuotas(req, res) {
        try {
            const quotas = await weeklyQuotaService.getPermitQuotas(
                req.params.permitId,
                {
                    status: req.query.status,
                    startDate: req.query.startDate,
                    endDate: req.query.endDate
                }
            );

            res.json({
                status: 'success',
                data: quotas
            });
        } catch (error) {
            res.status(error.status || 500).json({
                status: 'error',
                message: error.message || 'Error retrieving permit quotas'
            });
        }
    }

    /**
     * Get pending quotas for controller
     * @route GET /api/quotas/pending
     */
    async getPendingQuotas(req, res) {
        try {
            const quotas = await weeklyQuotaService.getPendingQuotas(req.controllerId);

            res.json({
                status: 'success',
                data: quotas
            });
        } catch (error) {
            res.status(error.status || 500).json({
                status: 'error',
                message: error.message || 'Error retrieving pending quotas'
            });
        }
    }

    /**
     * Get quota usage history
     * @route GET /api/quotas/:quotaId/usage-history
     */
    async getQuotaUsageHistory(req, res) {
        try {
            const history = await weeklyQuotaService.getQuotaUsageHistory(
                req.params.quotaId
            );

            res.json({
                status: 'success',
                data: history
            });
        } catch (error) {
            res.status(error.status || 500).json({
                status: 'error',
                message: error.message || 'Error retrieving usage history'
            });
        }
    }

    /**
     * Cancel quota request
     * @route POST /api/quotas/:quotaId/cancel
     */
    async cancelQuota(req, res) {
        try {
            const quota = await weeklyQuotaService.cancelQuota(
                req.params.quotaId,
                req.body.reason,
                req.userId
            );

            res.json({
                status: 'success',
                message: 'Quota cancelled successfully',
                data: quota
            });
        } catch (error) {
            res.status(error.status || 500).json({
                status: 'error',
                message: error.message || 'Error cancelling quota'
            });
        }
    }

    /**
     * Generate quota summary
     * @route GET /api/quotas/permit/:permitId/summary
     */
    async generateQuotaSummary(req, res) {
        try {
            const summary = await weeklyQuotaService.generateQuotaSummary(
                req.params.permitId,
                req.query.startDate,
                req.query.endDate
            );

            res.json({
                status: 'success',
                data: summary
            });
        } catch (error) {
            res.status(error.status || 500).json({
                status: 'error',
                message: error.message || 'Error generating summary'
            });
        }
    }

    /**
     * Validate quota data
     * @private
     */
    async validateQuotaData(data) {
        const errors = [];

        if (!data.permitId) {
            errors.push('Permit ID is required');
        }

        if (!data.plannedUsageDate) {
            errors.push('Planned usage date is required');
        } else {
            const plannedDate = new Date(data.plannedUsageDate);
            const today = new Date();
            if (plannedDate < today) {
                errors.push('Planned usage date cannot be in the past');
            }
        }

        if (!data.purpose) {
            errors.push('Purpose is required');
        }

        if (!data.blastingLocation) {
            errors.push('Blasting location is required');
        }

        if (!data.blastingTime) {
            errors.push('Blasting time is required');
        }

        if (!data.safetyMeasures) {
            errors.push('Safety measures are required');
        }

        if (!Array.isArray(data.items) || data.items.length === 0) {
            errors.push('At least one explosive item is required');
        } else {
            for (const item of data.items) {
                if (!item.explosiveTypeId || !item.quantity || !item.unit) {
                    errors.push('Invalid explosive item data');
                    break;
                }
                if (item.quantity <= 0) {
                    errors.push('Quantity must be greater than zero');
                    break;
                }
            }
        }

        return errors;
    }

    /**
     * Validate status transition
     * @private
     */
    async validateStatusTransition(quotaId, newStatus, userRole) {
        const quota = await weeklyQuotaService.getQuotaDetails(quotaId);
        if (!quota) return 'Quota not found';

        const allowedTransitions = {
            'Pending': ['Approved', 'Rejected', 'Cancelled'],
            'Approved': ['Used', 'Expired', 'Cancelled'],
            'Rejected': [],
            'Used': [],
            'Expired': [],
            'Cancelled': []
        };

        if (!allowedTransitions[quota.Status].includes(newStatus)) {
            return `Cannot transition from ${quota.Status} to ${newStatus}`;
        }

        const rolePermissions = {
            'ROLE_ADMIN': ['Approved', 'Rejected', 'Cancelled', 'Expired'],
            'ROLE_EXPLOSIVE_CONTROLLER': ['Approved', 'Rejected'],
            'ROLE_SITE_ENGINEER': ['Cancelled']
        };

        if (!rolePermissions[userRole]?.includes(newStatus)) {
            return 'Unauthorized to perform this status change';
        }

        return null;
    }
}

module.exports = new WeeklyQuotaController();