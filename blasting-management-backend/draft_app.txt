// app.js

const express = require('express');
const cors = require('cors');
const fileUpload = require('express-fileupload');
const path = require('path');
const helmet = require('helmet');
const compression = require('compression');
const morgan = require('morgan');
require('dotenv').config();

// Initialize express app
const app = express();

// Database
const db = require('./config/db.config');

// Test database connection
db.authenticate()
    .then(() => console.log('Database connected successfully'))
    .catch(err => console.error('Unable to connect to the database:', err));

// Middleware
app.use(helmet()); // Security headers
app.use(compression()); // Compress responses
app.use(morgan('dev')); // Logging
app.use(cors({
    origin: process.env.FRONTEND_URL || 'http://localhost:4200',
    credentials: true
}));
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// File upload configuration
app.use(fileUpload({
    createParentPath: true,
    limits: {
        fileSize: 10 * 1024 * 1024 // 10MB max file size
    },
    abortOnLimit: true
}));

// Static files
app.use('/uploads', express.static(path.join(__dirname, 'uploads')));

// Initialize schedulers
const { initializeSchedulers } = require('./schedulers');
initializeSchedulers();

// Routes
const authRoutes = require('./routes/auth.routes');
const userRoutes = require('./routes/user.routes');
const siteEngineerRoutes = require('./routes/site-engineer.routes');
const explosiveControllerRoutes = require('./routes/explosive-controller.routes');
const explosiveDealerRoutes = require('./routes/explosive-dealer.routes');
const explosiveTypeRoutes = require('./routes/explosive-type.routes');
const explosiveStoreRoutes = require('./routes/explosive-store.routes');
const storeInventoryRoutes = require('./routes/store-inventory.routes');
const storeThresholdRoutes = require('./routes/store-threshold.routes');
const explosivePermitRoutes = require('./routes/explosive-permit.routes');
const weeklyQuotaRoutes = require('./routes/weekly-quota.routes');
const purchaseRoutes = require('./routes/purchase.routes');

// API routes
app.use('/api/auth', authRoutes);
app.use('/api/users', userRoutes);
app.use('/api/site-engineers', siteEngineerRoutes);
app.use('/api/explosive-controllers', explosiveControllerRoutes);
app.use('/api/explosive-dealers', explosiveDealerRoutes);
app.use('/api/explosive-types', explosiveTypeRoutes);
app.use('/api/explosive-stores', explosiveStoreRoutes);
app.use('/api/store-inventory', storeInventoryRoutes);
app.use('/api/store-thresholds', storeThresholdRoutes);
app.use('/api/explosive-permits', explosivePermitRoutes);
app.use('/api/weekly-quotas', weeklyQuotaRoutes);
app.use('/api/purchases', purchaseRoutes);

// Upload routes for different document types
app.post('/api/upload/permits', (req, res) => {
    if (!req.files || !req.files.permit) {
        return res.status(400).json({
            status: 'error',
            message: 'No permit file uploaded'
        });
    }

    const permitFile = req.files.permit;
    const fileName = `${Date.now()}-${permitFile.name}`;
    const uploadPath = path.join(__dirname, 'uploads/permits', fileName);

    permitFile.mv(uploadPath, (err) => {
        if (err) {
            return res.status(500).json({
                status: 'error',
                message: 'Error uploading file'
            });
        }

        res.json({
            status: 'success',
            message: 'File uploaded successfully',
            fileName: fileName,
            filePath: `/uploads/permits/${fileName}`
        });
    });
});

// Error handling middleware
app.use((req, res, next) => {
    const error = new Error('Not Found');
    error.status = 404;
    next(error);
});

app.use((error, req, res, next) => {
    res.status(error.status || 500).json({
        status: 'error',
        message: error.message || 'Internal Server Error',
        stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
    });
});

// Health check endpoint
app.get('/health', (req, res) => {
    res.json({
        status: 'success',
        message: 'Server is running',
        timestamp: new Date(),
        uptime: process.uptime()
    });
});

// Rate limiting
const rateLimit = require('express-rate-limit');

const apiLimiter = rateLimit({
    windowMs: 15 * 60 * 1000, // 15 minutes
    max: 100, // Limit each IP to 100 requests per windowMs
    message: 'Too many requests from this IP, please try again after 15 minutes'
});

app.use('/api/', apiLimiter);

// Security measures
app.use(helmet.contentSecurityPolicy({
    directives: {
        defaultSrc: ["'self'"],
        styleSrc: ["'self'", "'unsafe-inline'"],
        imgSrc: ["'self'", 'data:', 'https:'],
        scriptSrc: ["'self'"]
    }
}));

app.use(helmet.crossOriginResourcePolicy({ policy: "cross-origin" }));

// Request size limits
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ limit: '10mb', extended: true }));

// CORS error handling
app.use((err, req, res, next) => {
    if (err.name === 'UnauthorizedError') {
        res.status(401).json({
            status: 'error',
            message: 'Invalid token'
        });
    }
    next(err);
});

// Graceful shutdown
process.on('SIGTERM', () => {
    console.log('SIGTERM signal received. Closing HTTP server');
    app.close(() => {
        console.log('HTTP server closed');
        process.exit(0);
    });
});

module.exports = app;